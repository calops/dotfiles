" Core settings
let mapleader = ","
set inccommand=nosplit
set termguicolors
set number
set cursorline
set mouse=a
set shortmess+=c
set concealcursor=
set textwidth=120
let g:cursorhold_updatetime = 200

" Colors
set background=dark
set colorcolumn=120

" Indentation
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent

" Special chars
set listchars=tab:→\ ,nbsp:␣,trail:~,precedes:«,extends:»
set list

" Tabs
function! NewTab()
    let view = winsaveview()
    " Have to do it this way, since airline's tabline somehow doesn't show the
    " new tab when using "tabedit %"
    let file = nvim_get_current_buf()
    tabnew
    execute 'buffer' file
    call winrestview(view)
endfunction

nnoremap <silent> <C-t> :call NewTab()<CR>
nnoremap <silent> <C-Tab> :tabnext<CR>
nnoremap <silent> <C-S-Tab> :tabprevious<CR>

" Splits
set splitbelow
set splitright

" Telescope
nnoremap <silent> <C-p> <cmd>Telescope find_files<cr>
nnoremap <silent> <leader><Space> <cmd>Telescope live_grep<cr>
nnoremap <silent> <leader>b <cmd>Telescope buffers<cr>
nnoremap <silent> <leader>h <cmd>Telescope help_tags<cr>
nnoremap <silent> <leader>e <cmd>Telescope symbols theme=square_cursor<cr>
nnoremap <silent> <leader>a <cmd>CodeActionMenu<cr>

" vim help
augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | vert resize 80 | set winfixwidth | endif
augroup END

" Lua machinery
lua<<EOF

local fn = vim.fn
local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'
if fn.empty(fn.glob(install_path)) > 0 then
  packer_bootstrap = fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})
end

-- Plugins
require('packer').startup(function(use)
    use 'wbthomason/packer.nvim'

    -- IDE
    use 'williamboman/nvim-lsp-installer'
    use 'neovim/nvim-lspconfig'
    use 'onsails/lspkind.nvim'
    use {
        'hrsh7th/nvim-cmp',
        requires = {
            'hrsh7th/cmp-nvim-lua',
            'hrsh7th/cmp-nvim-lsp',
            'hrsh7th/cmp-buffer',
            'hrsh7th/cmp-path',
            'hrsh7th/cmp-cmdline',
        },
    }
    use 'folke/trouble.nvim'
    use 'weilbith/nvim-code-action-menu'
    use 'smjonas/inc-rename.nvim'
    use 'RRethy/vim-illuminate'
    use 'numToStr/Comment.nvim'

    -- Git
    use 'tpope/vim-fugitive'
    use 'lewis6991/gitsigns.nvim'

    -- File browsing
    use {'nvim-telescope/telescope.nvim', requires = {'nvim-lua/plenary.nvim'}}
    use {'nvim-telescope/telescope-fzf-native.nvim', run = { 'make' }}
    use 'nvim-telescope/telescope-symbols.nvim'
    use 'nvim-telescope/telescope-vimspector.nvim'
    use 'nvim-telescope/telescope-ui-select.nvim'

    -- Syntax
    use {'nvim-treesitter/nvim-treesitter', run = ':TSUpdate'}
    use 'nvim-treesitter/nvim-treesitter-context'
    use 'nvim-treesitter/nvim-treesitter-textobjects'
    use 'JoosepAlviste/nvim-ts-context-commentstring'
    use "ziontee113/syntax-tree-surfer"

    -- UI
    use 'kyazdani42/nvim-web-devicons'
    use 'kyazdani42/nvim-tree.lua'
    use 'nvim-lualine/lualine.nvim'
    use 'rmagatti/auto-session'
    use 'kosayoda/nvim-lightbulb'
    use 'lukas-reineke/indent-blankline.nvim'
    use 'rcarriga/nvim-notify'
    use 'kdheepak/tabline.nvim'

    -- Colors
    use 'Shatur/neovim-ayu'
    use {'catppuccin/nvim', as = 'catppuccin'}
    use 'folke/tokyonight.nvim'
    use 'sainnhe/edge'
    use "savq/melange"
    use 'frenzyexists/aquarium-vim'
    use 'ful1e5/onedark.nvim'
    use "EdenEast/nightfox.nvim"

    -- Firefox
    use {'glacambre/firenvim', run = function() vim.fn['firenvim#install'](0) end}

    -- Vim MISC
    use 'folke/which-key.nvim'
    use 'antoinemadec/FixCursorHold.nvim'

    if packer_bootstrap then
        require('packer').sync()
    end
end)

-- Misc
require('which-key').setup{}
require('trouble').setup{}
require('auto-session').setup{}
require('nvim-lightbulb').setup{autocmd = {enabled = true}}
require('indent_blankline').setup{
    show_current_context = true,
    show_current_context_start = false,
}
require('gitsigns').setup{
    signs = {
        add          = {hl = 'GitSignsAdd'   , text = '❚', numhl='GitSignsAddNr'   , linehl='GitSignsAddLn'},
        change       = {hl = 'GitSignsChange', text = '❚', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
        delete       = {hl = 'GitSignsDelete', text = '_', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
        topdelete    = {hl = 'GitSignsDelete', text = '‾', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
        changedelete = {hl = 'GitSignsChange', text = '❚', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
    },
}
require('Comment').setup()

-- Language servers
require('nvim-lsp-installer').setup{
    automatic_installation = true,
}

local on_attach = function(client)
    require('illuminate').on_attach(client)
end,

require('lspconfig').pyright.setup{on_attach=on_attach}
require('lspconfig').rust_analyzer.setup{on_attach=on_attach}
require('lspconfig').sumneko_lua.setup{on_attach=on_attach}
require('lspconfig').vimls.setup{on_attach=on_attach}
require('inc_rename').setup()
require('tabline').setup()
require('treesitter-context').setup{
    enable = true,
    max_lines = 5,
    trim_scope = 'outer',
    patterns = {
        rust = {
            'impl_item',
            'enum',
            'struct',
        },
    },
    zindex = 20,
    mode = 'topline',
}

-- Telescope
require('telescope').setup({
    defaults = {
        layout_strategy = "flex",
        layout_config = {
            flex = {
                flip_columns = 200,
            },
        },
        borderchars = { "─", "│", "─", "│", "┌", "┐", "┘", "└" },
        winblend = 10,
    },
})

require('telescope.themes').square_cursor = function()
    local opts = {
        borderchars = {
            prompt = { "─", "│", " ", "│", "┌", "┐", "│", "│" },
            results = { "─", "│", "─", "│", "├", "┤", "┘", "└" },
            preview = { "─", "│", "─", "│", "┌", "┐", "┘", "└" },
        },
    }
    return require('telescope.themes').get_cursor(opts)
end

require('telescope').load_extension('fzf')
require("telescope").load_extension("ui-select")

-- Syntax
require('nvim-treesitter.configs').setup {
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = false,
    },
    incremental_selection = {
        enable = true,
        keymaps = {
            init_selection = '<CR>',
            scope_incremental = '<CR>',
            node_incremental = '<TAB>',
            node_decremental = '<S-TAB>',
        },
    },
    textobjects = {
        select = {
            enable = true,
            lookahead = true,
            keymaps = {
                ["af"] = "@function.outer",
                ["if"] = "@function.inner",
                ["ac"] = "@class.outer",
                ["ic"] = "@class.inner",
            },
        },
        swap = {
            enable = true,
            swap_next = {
                ["<leader>p"] = "@parameter.inner",
            },
            swap_previous = {
                ["<leader>P"] = "@parameter.inner",
            },
        },
        lsp_interop = {
            enable = true,
            border = 'none',
            peek_definition_code = {
                ["<leader>df"] = "@function.outer",
                ["<leader>dF"] = "@class.outer",
                },
            },
        },
    context_commentstring = { enable = true },
}

-- Status line
require('lualine').setup {
    --options = { theme = 'ayu' },
}

-- Theme
local colors = require('ayu.colors')
require('ayu').setup {
    mirage = true,
    overrides = {
        NormalFloat = {bg = colors.panel_shadow}
    }
}
require('catppuccin').setup{}

require('nvim-tree').setup{}

-- Completion
local cmp = require'cmp'

cmp.setup({
    mapping = cmp.mapping.preset.insert({
        ['<C-b>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<C-e>'] = cmp.mapping.abort(),
        ['<CR>'] = cmp.mapping.confirm({ select = false }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    }),
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
    }, {
        { name = 'buffer' },
    }),
    formatting = {
        format = require('lspkind').cmp_format(),
    },
})

-- Set configuration for specific filetype.
cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
        { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
        { name = 'buffer' },
    })
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
        { name = 'buffer' }
    }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
        { name = 'path' }
    }, {
        { name = 'cmdline' }
    })
})

-- Setup lspconfig.
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
local builtins = require('telescope.builtin')

local bufopts = { noremap=true, silent=true, buffer=bufnr }
vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
vim.keymap.set('n', 'gd', builtins.lsp_definitions, bufopts)
vim.keymap.set('n', 'K', vim.lsp.buf.hover, bufopts)
vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, bufopts)
vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, bufopts)
vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, bufopts)
vim.keymap.set('n', '<space>wl', function()
print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
end, bufopts)
vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)
vim.keymap.set('n', 'gr', builtins.lsp_references, bufopts)
vim.keymap.set('n', '<space>f', vim.lsp.buf.formatting, bufopts)
vim.keymap.set("n", "<leader>rn", function() return ":IncRename " .. vim.fn.expand("<cword>") end, { expr = true })

EOF

colorscheme ayu

augroup illuminate_augroup
    autocmd!
    autocmd VimEnter * hi illuminatedWord cterm=underline,bold gui=underline,bold
    autocmd VimEnter * hi LspReferenceText cterm=underline,bold gui=underline,bold
    autocmd VimEnter * hi LspReferenceWrite cterm=underline,bold gui=underline,bold
    autocmd VimEnter * hi LspReferenceRead cterm=underline,bold gui=underline,bold
    autocmd VimEnter * hi TreesitterContext cterm=italic gui=italic
augroup END
